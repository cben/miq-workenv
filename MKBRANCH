#!/usr/bin/env fish

# Assumes this script & files live in a parallel subdir,
# e.g. ~/miq/WORKENV/ alongside ~/miq/<branch> manageiq checkouts.
set workenv_dir (dirname (realpath (status --current-filename)))  # ~/miq/WORKENV
set dir (dirname $workenv_dir)                                    # ~/miq
set workenv_relative ../(basename $workenv_dir)                   # ../WORKENV

if [ (count $argv) -lt 1 ]
    set name (status --current-filename)
    echo "Usage: $name <branch_name> [<start-point>] [<git branch options...>]"
    echo "Should be run from an existing checkout directory."
    exit 2
end
set branch $argv[1]
set git_branch_extra_args $argv[2..-1]
set worktree $dir/$branch

git branch $branch $git_branch_extra_args
or echo "^^ That's OK, can use an existing branch."

git worktree add $worktree $branch

for plugin in (ls $dir/PLUGINS/)
    # TODO: defer creating plugin branches?  but "master is already checked out in worktree foo".
    # TODO: by default branch off plugin branches in current dir??  probably messy idea.
    pushd $dir/PLUGINS/$plugin
    git branch $branch $git_branch_extra_args
    or echo "^^ That's OK, can use an existing branch."

    git worktree add $worktree/plugins/$plugin $branch
    popd
    # Link plugin back to use parent manageiq dir
    ln -s -v ../../.. $worktree/plugins/$plugin/spec/manageiq
end

ln -s -v ../$workenv_relative/Gemfile.dev.rb $worktree/bundler.d/
ln -s -v $workenv_relative/.agignore $worktree/

sed -e "s/vmdb_development/vmdb_development_$branch/" \
    -e "s/vmdb_production/vmdb_production_$branch/" \
    -e "s/vmdb_test\(<%= ENV['TEST_ENV_NUMBER'] %>\)?/vmdb_test_$branch<%= ENV['TEST_ENV_NUMBER'] %>/" \
    $worktree/config/database.pg.yml > $worktree/config/database.yml
diff -u $worktree/config/database.pg.yml $worktree/config/database.yml

echo "== Next steps =="
echo "cd $worktree/"
echo "bin/setup"
